{"ast":null,"code":"class Api {\n  constructor(options) {\n    this._checkResponse = res => {\n      if (res.ok) {\n        return res.json();\n      }\n      return Promise.reject('Error');\n    };\n    this.baseUrl = options.baseUrl;\n    this.headers = options.headers;\n  }\n  _request(endPoint, options) {\n    return fetch(`${this.baseUrl}${endPoint}`, options).then(this._checkResponse);\n  }\n  getUserInformation() {\n    return this._request('/users/me', {\n      method: 'GET',\n      headers: this.headers\n    });\n  }\n  getInitialCards() {\n    return this._request('/cards', {\n      method: 'GET',\n      headers: this.headers\n    });\n  }\n  setUserInformation(_ref) {\n    let {\n      name,\n      about\n    } = _ref;\n    return this._request('/users/me', {\n      method: 'PATCH',\n      headers: this.headers,\n      body: JSON.stringify({\n        name,\n        about\n      })\n    });\n  }\n  addCard(name, link) {\n    return this._request('/cards', {\n      method: 'POST',\n      headers: this.headers,\n      body: JSON.stringify({\n        name: name,\n        link: link\n      })\n    });\n  }\n  deleteCard(cardId) {\n    return this._request(`/cards/${cardId}`, {\n      method: 'DELETE',\n      headers: this.headers\n    });\n  }\n  likeCard(cardId) {\n    return this._request(`/cards/${cardId}/likes`, {\n      method: 'PUT',\n      headers: this.headers\n    });\n  }\n  removeLikeCard(cardId) {\n    return this._request(`/cards/${cardId}/likes`, {\n      method: 'DELETE',\n      headers: this.headers\n    });\n  }\n  changeLikeCardStatus(cardId, isLiked) {\n    if (isLiked) {\n      return this.likeCard(cardId);\n    } else {\n      return this.removeLikeCard(cardId);\n    }\n  }\n  updateAvatarUser(avatarLink) {\n    return this._request('/users/me/avatar', {\n      method: 'PATCH',\n      headers: this.headers,\n      body: JSON.stringify({\n        avatar: avatarLink\n      })\n    });\n  }\n  signUp(_ref2) {\n    let {\n      password,\n      email\n    } = _ref2;\n    return this._request('/signup', {\n      method: 'POST',\n      headers: this.headers,\n      body: JSON.stringify({\n        password: password,\n        email: email\n      })\n    });\n  }\n  signIn(_ref3) {\n    let {\n      password,\n      email\n    } = _ref3;\n    return this._request('/signin', {\n      method: 'POST',\n      headers: this.headers,\n      body: JSON.stringify({\n        password: password,\n        email: email\n      })\n    });\n  }\n  keyAuthentication(token) {\n    return this._request('/users/me', {\n      method: 'GET',\n      headers: Object.assign(this.headers, {\n        \"Authorization\": `Bearer ${token}`\n      })\n    });\n  }\n}\nconst api = new Api({\n  baseUrl: 'https://mesto.nomoreparties.co/v1/cohort-64',\n  headers: {\n    authorization: 'fd367575-aa2a-4d14-b6f6-0479dde56c06',\n    'Content-Type': 'application/json'\n  }\n});\nconst apiAuth = new Api({\n  baseUrl: 'https://auth.nomoreparties.co',\n  headers: {\n    \"Content-Type\": \"application/json\"\n  }\n});\nexport { api, apiAuth };","map":{"version":3,"names":["Api","constructor","options","_checkResponse","res","ok","json","Promise","reject","baseUrl","headers","_request","endPoint","fetch","then","getUserInformation","method","getInitialCards","setUserInformation","_ref","name","about","body","JSON","stringify","addCard","link","deleteCard","cardId","likeCard","removeLikeCard","changeLikeCardStatus","isLiked","updateAvatarUser","avatarLink","avatar","signUp","_ref2","password","email","signIn","_ref3","keyAuthentication","token","Object","assign","api","authorization","apiAuth"],"sources":["C:/Users/admin/dev/0_Mesto_Finish/react-mesto-api-full-gha/frontend/src/utils/Api.js"],"sourcesContent":["class Api {\r\n  constructor(options) {\r\n    this.baseUrl = options.baseUrl;\r\n    this.headers = options.headers;\r\n  };\r\n\r\n  _request(endPoint, options) {\r\n    return fetch(`${this.baseUrl}${endPoint}`, options).then(this._checkResponse);\r\n  };\r\n\r\n  getUserInformation() {\r\n    return this._request('/users/me', {\r\n      method: 'GET',\r\n      headers: this.headers\r\n    });\r\n  };\r\n\r\n  getInitialCards() {\r\n    return this._request('/cards', {\r\n      method: 'GET',\r\n      headers: this.headers\r\n    });\r\n  };\r\n\r\n  setUserInformation({ name, about }) {\r\n    return this._request('/users/me', {\r\n      method: 'PATCH',\r\n      headers: this.headers,\r\n      body: JSON.stringify({\r\n        name,\r\n        about\r\n      })\r\n    });\r\n  };\r\n\r\n  addCard(name, link) {\r\n    return this._request('/cards', {\r\n      method: 'POST',\r\n      headers: this.headers,\r\n      body: JSON.stringify({\r\n        name: name,\r\n        link: link\r\n      })\r\n    });\r\n  };\r\n\r\n  deleteCard(cardId) {\r\n    return this._request(`/cards/${cardId}`, {\r\n      method: 'DELETE',\r\n      headers: this.headers\r\n    });\r\n  };\r\n\r\n  likeCard(cardId) {\r\n    return this._request(`/cards/${cardId}/likes`, {\r\n      method: 'PUT',\r\n      headers: this.headers\r\n    });\r\n  };\r\n\r\n  removeLikeCard(cardId) {\r\n    return this._request(`/cards/${cardId}/likes`, {\r\n      method: 'DELETE',\r\n      headers: this.headers\r\n    });\r\n  };\r\n\r\n\r\n  changeLikeCardStatus(cardId, isLiked) {\r\n    if (isLiked) {\r\n      return this.likeCard(cardId);\r\n    }\r\n    else {\r\n      return this.removeLikeCard(cardId)\r\n    }\r\n  }\r\n\r\n  updateAvatarUser(avatarLink) {\r\n    return this._request('/users/me/avatar', {\r\n      method: 'PATCH',\r\n      headers: this.headers,\r\n      body: JSON.stringify({\r\n        avatar: avatarLink\r\n      })\r\n    });\r\n  };\r\n\r\n  signUp({ password, email }) {\r\n    return this._request('/signup', {\r\n      method: 'POST',\r\n      headers: this.headers,\r\n      body: JSON.stringify({\r\n        password: password,\r\n        email: email\r\n      })\r\n    });\r\n  }\r\n\r\n  signIn({ password, email }) {\r\n    return this._request('/signin', {\r\n      method: 'POST',\r\n      headers: this.headers,\r\n      body: JSON.stringify({\r\n        password: password,\r\n        email: email\r\n      })\r\n    });\r\n  }\r\n  \r\n  keyAuthentication(token) {\r\n    return this._request('/users/me', {\r\n      method: 'GET',\r\n      headers: Object.assign(this.headers,{\"Authorization\" : `Bearer ${token}`})\r\n    });\r\n  }\r\n\r\n  _checkResponse = (res) => {\r\n    if (res.ok) {\r\n      return res.json();\r\n    }\r\n    return Promise.reject('Error');\r\n  }\r\n}\r\n\r\nconst api = new Api({\r\n  baseUrl: 'https://mesto.nomoreparties.co/v1/cohort-64',\r\n  headers: {\r\n    authorization: 'fd367575-aa2a-4d14-b6f6-0479dde56c06',\r\n    'Content-Type': 'application/json'\r\n  }\r\n});\r\n\r\nconst apiAuth = new Api({\r\n  baseUrl: 'https://auth.nomoreparties.co',\r\n  headers: {\r\n    \"Content-Type\": \"application/json\"\r\n  }\r\n});\r\n\r\nexport {api,apiAuth};\r\n\r\n\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}